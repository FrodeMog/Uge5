import unittest
from details.loginDetails import LoginDetails
from factories.factoryProduct import FactoryProduct
from factories.factoryTransaction import FactoryTransaction
from factories.factoryUser import FactoryUser
from factories.factoryCard import FactoryCard
#python -m unittest test.py

#Product
class TestFactoryProduct (unittest.TestCase):
    def test_create_product(self):
        factory = FactoryProduct()
        product = factory.create_product(manufacturer_id="1", manufacturer="Apple", name="iPhone", price=1000, currency="USD")
        self.assertEqual(product.manufacturer, "Apple")
        self.assertEqual(product.name, "iPhone")
        self.assertEqual(product.price, 1000)
        self.assertEqual(product.currency, "USD")
        #Check if the product_id is not None
        self.assertIsNotNone(product.product_id) #id should be generated by factory
    
    def test_create_product_with_id(self):
        factory = FactoryProduct()
        product = factory.create_product(manufacturer_id="1", manufacturer="Apple", name="iPhone", price=1000, currency="USD", product_id="1")
        self.assertEqual(product.product_id, "1") #id should be the same as the one passed
    
    def test_create_product_with_int_id(self):
        factory = FactoryProduct()
        product = factory.create_product(manufacturer_id=1, manufacturer="Apple", name="iPhone", price=1000, currency="USD", product_id=1)
        self.assertEqual(product.product_id, "1") #id should convert the int to a string
    
    def test_create_product_with_missing_fields(self):
        factory = FactoryProduct()
        with self.assertRaises(ValueError):
            product = factory.create_product(manufacturer_id="1", manufacturer="Apple", name="iPhone", currency="USD", product_id="1")
    
    def test_create_product_with_kwargs(self):
        factory = FactoryProduct()
        product = factory.create_product(manufacturer_id="1", manufacturer="Apple", name="iPhone", price=1000, currency="USD", product_id="1", color="black")
        self.assertEqual(product.color, "black")

    def test_create_product_with_kwargs_dict(self):
        factory = FactoryProduct()
        product = factory.create_product(manufacturer_id="1", manufacturer="Apple", name="iPhone", price=1000, currency="USD", tecnical_specs={"screen": "OLED"})
        self.assertEqual(product.tecnical_specs, {"screen": "OLED"})
    
    def test_create_product_with_dict(self):
        factory = FactoryProduct()
        product_dict = { #Scrambled order
            "currency": "USD",
            "manufacturer": "Apple",
            "product_id": "1",
            "price": 1000,
            "manufacturer_id": "1",
            "name": "iPhone",
            "color": "black"
        }
        product = factory.create_product(**product_dict)
        #assert that the product is same value as all the values in the dict
        for key in product_dict:
            self.assertEqual(getattr(product, key), product_dict[key])
    
    def test_create_product_with_dict_missing_fields(self):
        factory = FactoryProduct()
        product_dict = { #Scrambled order
            "currency": "USD",
            "manufacturer": "Apple",
            "product_id": "1",
            "manufacturer_id": "1",
        }
        with self.assertRaises(ValueError):
            product = factory.create_product(**product_dict)

#User
class TestFactoryUser (unittest.TestCase):
    def test_create_user(self):
        factory = FactoryUser()
        loginDetails = LoginDetails("john", "123")
        user = factory.create_user(name="John", age=30, email="john@email.com", address="123 fake st", shipping_address="123 fake st", phone="123456789", loginDetails=loginDetails)
        for key in ["name", "age", "email", "address", "shipping_address", "phone", "loginDetails"]:
            self.assertIsNotNone(getattr(user, key))
        self.assertIsNotNone(user.user_id)
    
    def test_create_user_with_id(self):
        factory = FactoryUser()
        loginDetails = LoginDetails("john", "123")
        user = factory.create_user(name="John", age=30, email="john@email.com", address="123 fake st", shipping_address="123 fake st", phone="123456789", loginDetails=loginDetails, user_id="1")
        for key in ["name", "age", "email", "address", "shipping_address", "phone", "loginDetails"]:
            self.assertIsNotNone(getattr(user, key))
        self.assertEqual(user.user_id, "1")
    
    def test_create_user_with_int_id(self):
        factory = FactoryUser()
        loginDetails = LoginDetails("john", "123")
        user = factory.create_user(name="John", age=30, email="john@email.com", address="123 fake st", shipping_address="123 fake st", phone="123456789", loginDetails=loginDetails, user_id=1)
        for key in ["name", "age", "email", "address", "shipping_address", "phone", "loginDetails"]:
            self.assertIsNotNone(getattr(user, key))
        self.assertEqual(user.user_id, "1")

    def test_create_user_with_missing_fields(self):
        factory = FactoryUser()
        with self.assertRaises(ValueError):
            user = factory.create_user(name="John", age=30, address="123 fake st")
    
    def test_create_user_with_dict(self):
        factory = FactoryUser()
        loginDetails = LoginDetails("john", "123")
        user_dict = {
            "name": "John",
            "age": 30,
            "email": "john@email.com",
            "address": "123 fake st",
            "shipping_address": "123 fake st",
            "phone": "123456789",
            "loginDetails": loginDetails,
        }
        user = factory.create_user(**user_dict)
        for key in user_dict:
            self.assertEqual(getattr(user, key), user_dict[key])

    def test_create_user_with_dict_missing_fields(self):
        factory = FactoryUser()
        user_dict = {
            "name": "John",
            "age": 30,
            "email": "john@email.com",
            "address": "123 fake st",
            "shipping_address": "123 fake st",
            "phone": "123456789",
        }
        with self.assertRaises(ValueError):
            user = factory.create_user(**user_dict)

#Card
class TestFactoryCard (unittest.TestCase):
    def test_create_card(self):
        factory = FactoryCard()
        card = factory.create_card(card_number="123456789", card_holder_name="john", expiry_date="12/24", cvv="123")
        for key in ["card_number", "card_holder_name", "expiry_date", "cvv"]:
            self.assertIsNotNone(getattr(card, key))
    
    def test_create_card_with_missing_fields(self):
        factory = FactoryCard()
        with self.assertRaises(ValueError):
            card = factory.create_card(card_number="123456789", card_holder_name="john", expiry_date="12/24")
    
    def test_create_card_with_dict(self):
        factory = FactoryCard()
        card_dict = {
            "card_number": "123456789",
            "card_holder_name": "john",
            "expiry_date": "12/24",
            "cvv": "123",
        }
        card = factory.create_card(**card_dict)
        for key in card_dict:
            self.assertEqual(getattr(card, key), card_dict[key])
    
    def test_create_card_with_dict_missing_fields(self):
        factory = FactoryCard()
        card_dict = {
            "card_number": "123456789",
            "card_holder_name": "john",
            "expiry_date": "12/24",
        }
        with self.assertRaises(ValueError):
            card = factory.create_card(**card_dict)

#Transaction
class TestFactoryTransaction (unittest.TestCase):
    def setUp(self):
        self.factoryTransaction = FactoryTransaction()
        self.factoryUser = FactoryUser()
        self.factoryProduct = FactoryProduct()
        self.factoryCard = FactoryCard()
        self.loginDetails = LoginDetails("john", "123")
        self.user = self.factoryUser.create_user(name="John", age=30, email="john@email.com", address="123 fake st", shipping_address="123 fake st", phone="123456789", loginDetails=self.loginDetails)
        self.product = self.factoryProduct.create_product(manufacturer_id="1", manufacturer="Apple", name="iPhone", price=1000, currency="USD")
        self.card = self.factoryCard.create_card(card_number="123456789", card_holder_name="john", expiry_date="12/24", cvv="123")

    def test_create_transaction(self):
        transaction = self.factoryTransaction.create_transaction(userDetails=self.user, productDetails=self.product, cardDetails=self.card)
        for key in ["userDetails", "productDetails", "cardDetails"]:
            self.assertIsNotNone(getattr(transaction, key))
    
    def test_create_transaction_with_id(self):
        transaction = self.factoryTransaction.create_transaction(transaction_id="1",userDetails=self.user, productDetails=self.product, cardDetails=self.card)
        self.assertEqual(transaction.transaction_id, "1")

    def test_create_transaction_with_int_id(self):
        transaction = self.factoryTransaction.create_transaction(transaction_id=1,userDetails=self.user, productDetails=self.product, cardDetails=self.card)
        self.assertEqual(transaction.transaction_id, "1")

    def test_create_transaction_with_missing_fields(self):
        with self.assertRaises(ValueError):
            transaction = self.factoryTransaction.create_transaction(userDetails=self.user, productDetails=self.product)
    
    def test_create_transaction_with_dict(self):
        transaction_dict = {
            "userDetails": self.user,
            "productDetails": self.product,
            "cardDetails": self.card
        }
        transaction = self.factoryTransaction.create_transaction(**transaction_dict)
        for key in transaction_dict:
            self.assertEqual(getattr(transaction, key), transaction_dict[key])
    
    def test_create_transaction_with_dict_missing_fields(self):
        transaction_dict = {
            "userDetails": self.user,
            "productDetails": self.product,
        }
        with self.assertRaises(ValueError):
            transaction = self.factoryTransaction.create_transaction(**transaction_dict)

class CustomTestResult(unittest.TextTestResult):
    def printErrors(self):
        self.stream.writeln("Passed: {}".format(self.testsRun - len(self.failures) - len(self.errors)))
        self.stream.writeln("Failed: {}".format(len(self.failures)))
        self.stream.writeln("Errors: {}".format(len(self.errors)))
        super().printErrors()

class CustomTestRunner(unittest.TextTestRunner):
    resultclass = CustomTestResult

if __name__ == '__main__':
    unittest.main(testRunner=CustomTestRunner())