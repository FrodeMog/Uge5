import unittest
from details.loginDetails import LoginDetails
from factoryProduct import FactoryProduct
from factoryTransaction import FactoryTransaction
from factoryUser import FactoryUser
#python -m unittest tests.py

class TestFactoryProduct (unittest.TestCase):
    def test_create_product(self):
        factory = FactoryProduct()
        product = factory.create_product("1", "Apple", "iPhone", 1000, "USD")
        self.assertEqual(product.manufacturer, "Apple")
        self.assertEqual(product.name, "iPhone")
        self.assertEqual(product.price, 1000)
        self.assertEqual(product.currency, "USD")
        #Check if the product_id is not None
        self.assertIsNotNone(product.product_id) #id should be generated by factory
    
    def test_create_product_with_id(self):
        factory = FactoryProduct()
        product = factory.create_product("1", "Apple", "iPhone", 1000, "USD", "1")
        self.assertEqual(product.product_id, "1") #id should be the same as the one passed
    
    def test_create_product_with_int_id(self):
        factory = FactoryProduct()
        product = factory.create_product(1, "Apple", "iPhone", 1000, "USD", 1)
        self.assertEqual(product.product_id, "1") #id should convert the int to a string
    
    def test_create_product_with_missing_fields(self):
        factory = FactoryProduct()
        with self.assertRaises(ValueError):
            product = factory.create_product("1", "Apple", "iPhone", None, "USD")
    
    def test_create_product_with_kwargs(self):
        factory = FactoryProduct()
        product = factory.create_product("1", "Apple", "iPhone", 1000, "USD", "1", color="black")
        self.assertEqual(product.color, "black")

    def test_create_product_with_kwargs_dict(self):
        factory = FactoryProduct()
        product = factory.create_product("1", "Apple", "iPhone", 1000, "USD", "1", tecnical_specs={"screen": "OLED"})
        self.assertEqual(product.tecnical_specs, {"screen": "OLED"})
    
    def test_create_product_with_dict(self):
        factory = FactoryProduct()
        product_dict = { #Scrambled order
            "currency": "USD",
            "manufacturer": "Apple",
            "product_id": "1",
            "price": 1000,
            "manufacturer_id": "1",
            "name": "iPhone",
            "color": "black"
        }
        product = factory.create_product(**product_dict)
        #assert that the product is same value as all the values in the dict
        for key in product_dict:
            self.assertEqual(getattr(product, key), product_dict[key])
    
    def test_create_product_with_dict_missing_fields(self):
        factory = FactoryProduct()
        product_dict = { #Scrambled order
            "currency": "USD",
            "manufacturer": "Apple",
            "product_id": "1",
            "manufacturer_id": "1",
        }
        with self.assertRaises(ValueError):
            product = factory.create_product(**product_dict)

class TestFactoryUser (unittest.TestCase):
    def test_create_user(self):
        factory = FactoryUser()
        loginDetails = LoginDetails("john", "123")
        user = factory.create_user("John", 30, "john@email.com", "123 fake st", "123 fake st", "123456789", loginDetails)
        for key in ["name", "age", "email", "address", "shipping_address", "phone", "loginDetails"]:
            self.assertIsNotNone(getattr(user, key))
        self.assertIsNotNone(user.user_id)
    
    def test_create_user_with_id(self):
        factory = FactoryUser()
        loginDetails = LoginDetails("john", "123")
        user = factory.create_user("John", 30, "john@email.com", "123 fake st", "123 fake st", "123456789", loginDetails, "1")
        for key in ["name", "age", "email", "address", "shipping_address", "phone", "loginDetails"]:
            self.assertIsNotNone(getattr(user, key))
        self.assertEqual(user.user_id, "1")
    
    def test_create_user_with_int_id(self):
        factory = FactoryUser()
        loginDetails = LoginDetails("john", "123")
        user = factory.create_user("John", 30, "john@email.com", "123 fake st", "123 fake st", "123456789", loginDetails, 1)
        for key in ["name", "age", "email", "address", "shipping_address", "phone", "loginDetails"]:
            self.assertIsNotNone(getattr(user, key))
        self.assertEqual(user.user_id, "1")

    def test_create_user_with_missing_fields(self):
        factory = FactoryUser()
        with self.assertRaises(ValueError):
            user = factory.create_user("John", 30, "john@email.com", None, "123 fake st", None, None)
    
    def test_create_user_with_dict(self):
        factory = FactoryUser()
        loginDetails = LoginDetails("john", "123")
        user_dict = {
            "name": "John",
            "age": 30,
            "email": "john@email.com",
            "address": "123 fake st",
            "shipping_address": "123 fake st",
            "phone": "123456789",
            "loginDetails": loginDetails,
        }
        user = factory.create_user(**user_dict)
        for key in user_dict:
            self.assertEqual(getattr(user, key), user_dict[key])

    def test_create_user_with_dict_missing_fields(self):
        factory = FactoryUser()
        user_dict = {
            "name": "John",
            "age": 30,
            "email": "john@email.com",
            "address": "123 fake st",
            "shipping_address": "123 fake st",
            "phone": "123456789",
        }
        with self.assertRaises(ValueError):
            user = factory.create_user(**user_dict)
            

class TestFactoryTransaction (unittest.TestCase):
    def test_create_transaction(self):
        factory = FactoryTransaction()

class CustomTestResult(unittest.TextTestResult):
    def printErrors(self):
        self.stream.writeln("Passed: {}".format(self.testsRun - len(self.failures) - len(self.errors)))
        self.stream.writeln("Failed: {}".format(len(self.failures)))
        self.stream.writeln("Errors: {}".format(len(self.errors)))
        super().printErrors()

class CustomTestRunner(unittest.TextTestRunner):
    resultclass = CustomTestResult

if __name__ == '__main__':
    unittest.main(testRunner=CustomTestRunner())